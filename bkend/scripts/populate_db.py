from passlib.context import CryptContext
from sqlalchemy.orm import Session
import hashlib

from bkend import models
from bkend.crud import create_user, get_user_by_email


PWD_CONTEXT = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")


def get_password_hash(password: str) -> str:
    """Match the application's pre-hash + CryptContext logic.

    We compute SHA-256 hex digest then hash that with the configured
    CryptContext so produced hashes match those generated by the app.
    """
    if isinstance(password, str):
        pw_bytes = password.encode("utf-8")
    else:
        pw_bytes = password
    sha_hex = hashlib.sha256(pw_bytes).hexdigest()
    return PWD_CONTEXT.hash(sha_hex)


def main() -> None:
    """Populate the database with an admin user, if one does not already exist,
    or promote the existing user to admin..

    Run from the project root:  python -m bkend.scripts.populate_db
    """
    models.init_db()
    email = "admin@ex.com"
    raw_password = "pass"

    with Session(models.engine) as db:
        user = get_user_by_email(db, email=email)
        if user:
            if getattr(user, "is_admin", False):
                print(f"User {email} already exists and is an admin")
                return
            user.is_admin = True
            db.commit()
            print(f"Existing user {email} promoted to admin")
            return

        hashed = get_password_hash(raw_password)
        create_user(db, email=email, hashed_password=hashed)
        # Ensure the created user is marked admin
        created = get_user_by_email(db, email=email)
        if created:
            created.is_admin = True
            db.commit()
            print(f"Created admin user {email} with password '{raw_password}'")
        else:
            print("Failed to create admin user")


if __name__ == "__main__":
    main()
